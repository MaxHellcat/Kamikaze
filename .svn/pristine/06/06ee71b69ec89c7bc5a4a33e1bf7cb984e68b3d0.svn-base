//
//  GameStateController.h
//  Kamikaze
//
//  Created by Hellcat on 5/19/2011.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#ifndef GAME_STATE_CONTROLLER_H
#define GAME_STATE_CONTROLLER_H


#include "Singleton.h"
#include "constants.h"

// Include here as viewController also need them
#include "ActionRenderer.h"
#include "GarageRenderer.h"


class UIView;

enum {eStateAction=0, eStateActionPaused, eStateGarage, eNumStates};

// For debug only
static const char * states[eNumStates] =
{
	"eStateAction",
	"eStateActionPaused",
	"eStateGarage"
};


// Class to manage application callflows
class _GameStateController
{
private:

	GLbyte _state, _prevState;

	Renderer * _client;

public:
	_GameStateController();
	~_GameStateController() { printf("Controller deletion\n"); };

	Renderer * activeRenderer() { return _client; };

	void setState(GLbyte state) { _state = state; }
	const GLbyte state() const { return _state; }
	const GLbyte prevState() const { return _prevState; }
	
	const char * stateStr() const { return states[_state]; }
	const char * prevStateStr() const { return states[_prevState]; }
	
	void flow();

	// Set view to draw on
    void setView(UIView *);

    // The view we'll subview
    UIView * _view;

};

typedef Singleton<_GameStateController> GameStateController;

#endif // GAME_STATE_CONTROLLER_H
